
CanTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000252  00800100  000007f2  00000866  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000060  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000182  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000061b  00000000  00000000  00000c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000313  00000000  00000000  000012b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000795  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000140  00000000  00000000  00001d60  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001d4  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000413  00000000  00000000  00002074  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00002487  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  68:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  6c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  70:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  74:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  7c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  80:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  84:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  88:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  8c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  90:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	13 e0       	ldi	r17, 0x03	; 3
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e2 ef       	ldi	r30, 0xF2	; 242
  a8:	f7 e0       	ldi	r31, 0x07	; 7
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a2 35       	cpi	r26, 0x52	; 82
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>
  ba:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  be:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <_exit>

000000c2 <__bad_interrupt>:
  c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <initPort>:
{ 0x2C4,0,STD,8,{0x03,0x58,0x00,0x23,0x08,0x80,0x71,0x45}}
};

void initPort()
{
	DDRC = 0xff;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	87 b9       	out	0x07, r24	; 7
	PORTC = 0xff;
  ca:	88 b9       	out	0x08, r24	; 8
	DDRG = 0xff;
  cc:	83 bb       	out	0x13, r24	; 19
	PORTG = 0x00;
  ce:	14 ba       	out	0x14, r1	; 20
	DDRE = 0xff;
  d0:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0xff;
  d2:	8e b9       	out	0x0e, r24	; 14
}
  d4:	08 95       	ret

000000d6 <testPoint>:

void testPoint(int i)
{
	if(i == 0)
  d6:	89 2b       	or	r24, r25
  d8:	19 f4       	brne	.+6      	; 0xe0 <testPoint+0xa>
		PORTE=0xff;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	8e b9       	out	0x0e, r24	; 14
  de:	08 95       	ret
	else
		PORTE=0x00;
  e0:	1e b8       	out	0x0e, r1	; 14
  e2:	08 95       	ret

000000e4 <breakPoint>:

void breakPoint()
{
	while(1)
	{
		PORTE=0x00;
  e4:	1e b8       	out	0x0e, r1	; 14
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <breakPoint>

000000e8 <main>:
}

void main()
{
	char count;
	initPort();
  e8:	0e 94 63 00 	call	0xc6	; 0xc6 <initPort>
	can_init(2);//b500k
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <can_init>
//		can_tx(7,&msg_NCR[2],0);
//		_delay_ms(10);

		//struct MOb msg_NCR3 = { 0x316,0,STD,8,{0x01,0x23,0x9C,0x0C,0x23,0x1C,0x00,0x7E}};
		//단일 메시지 (10ms) -> RPM 상승
		can_tx(7,&msg_NCR[3],0);
  f2:	87 e0       	ldi	r24, 0x07	; 7
  f4:	66 e8       	ldi	r22, 0x86	; 134
  f6:	72 e0       	ldi	r23, 0x02	; 2
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	0e 94 39 01 	call	0x272	; 0x272 <can_tx>
  fe:	f9 cf       	rjmp	.-14     	; 0xf2 <main+0xa>

00000100 <usart1_init>:
#define CPU_CLOCK_HZ	16000000
#define BAUDRATE0 2000
//USART 1 =======================================USART 1
void usart1_init(void)
{
	UCSR1A=0x00;
 100:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1B=0x98;
 104:	88 e9       	ldi	r24, 0x98	; 152
 106:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C=0x06;
 10a:	86 e0       	ldi	r24, 0x06	; 6
 10c:	80 93 ca 00 	sts	0x00CA, r24
	UBRR1H=0x00;
 110:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L=CPU_CLOCK_HZ/BAUDRATE0/16-1;
 114:	83 ef       	ldi	r24, 0xF3	; 243
 116:	80 93 cc 00 	sts	0x00CC, r24
}
 11a:	08 95       	ret

0000011c <usart1_receive>:

/* Read and write functions */
unsigned char usart1_receive( void )
{
	/* Wait for incomming data */
	while ( !(UCSR1A & (1<<RXC1)) );			                
 11c:	80 91 c8 00 	lds	r24, 0x00C8
 120:	87 ff       	sbrs	r24, 7
 122:	fc cf       	rjmp	.-8      	; 0x11c <usart1_receive>
	/* Return the data */
	return UDR1;
 124:	80 91 ce 00 	lds	r24, 0x00CE
}
 128:	08 95       	ret

0000012a <usart1_transmit>:

void usart1_transmit( unsigned char data )
{
 12a:	98 2f       	mov	r25, r24
	/* Wait for empty transmit buffer */
	while ( !(UCSR1A & (1<<UDRE1)) ); 			                
 12c:	80 91 c8 00 	lds	r24, 0x00C8
 130:	85 ff       	sbrs	r24, 5
 132:	fc cf       	rjmp	.-8      	; 0x12c <usart1_transmit+0x2>
	/* Start transmittion */
	UDR1 = data; 			        
 134:	90 93 ce 00 	sts	0x00CE, r25
}
 138:	08 95       	ret

0000013a <usart1_transmit_string>:

void usart1_transmit_string(char* p){
 13a:	fc 01       	movw	r30, r24
 13c:	07 c0       	rjmp	.+14     	; 0x14c <usart1_transmit_string+0x12>
}

void usart1_transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !(UCSR1A & (1<<UDRE1)) ); 			                
 13e:	80 91 c8 00 	lds	r24, 0x00C8
 142:	85 ff       	sbrs	r24, 5
 144:	fc cf       	rjmp	.-8      	; 0x13e <usart1_transmit_string+0x4>
	UDR1 = data; 			        
}

void usart1_transmit_string(char* p){
	while (*p)
		usart1_transmit(*p++);
 146:	31 96       	adiw	r30, 0x01	; 1
void usart1_transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !(UCSR1A & (1<<UDRE1)) ); 			                
	/* Start transmittion */
	UDR1 = data; 			        
 148:	90 93 ce 00 	sts	0x00CE, r25
}

void usart1_transmit_string(char* p){
	while (*p)
 14c:	90 81       	ld	r25, Z
 14e:	99 23       	and	r25, r25
 150:	b1 f7       	brne	.-20     	; 0x13e <usart1_transmit_string+0x4>
		usart1_transmit(*p++);
}
 152:	08 95       	ret

00000154 <usart0_init>:

//USART 0 =======================================USART 0
void usart0_init(void)
{
	UCSR0A=0x00;
 154:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B=0x98;
 158:	88 e9       	ldi	r24, 0x98	; 152
 15a:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C=0x06;
 15e:	86 e0       	ldi	r24, 0x06	; 6
 160:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0H=0x00;
 164:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L=CPU_CLOCK_HZ/BAUDRATE0/16-1;			// 9600 bps
 168:	83 ef       	ldi	r24, 0xF3	; 243
 16a:	80 93 c4 00 	sts	0x00C4, r24
}
 16e:	08 95       	ret

00000170 <usart0_receive>:

/* Read and write functions */
unsigned char usart0_receive( void )
{
	/* Wait for incomming data */
	while ( !(UCSR0A & (1<<RXC0)) );			                
 170:	80 91 c0 00 	lds	r24, 0x00C0
 174:	87 ff       	sbrs	r24, 7
 176:	fc cf       	rjmp	.-8      	; 0x170 <usart0_receive>
	/* Return the data */
	return UDR0;
 178:	80 91 c6 00 	lds	r24, 0x00C6
}
 17c:	08 95       	ret

0000017e <usart0_transmit>:

void usart0_transmit( unsigned char data )
{
 17e:	98 2f       	mov	r25, r24
	/* Wait for empty transmit buffer */
	while ( !(UCSR0A & (1<<UDRE0)) ); 			                
 180:	80 91 c0 00 	lds	r24, 0x00C0
 184:	85 ff       	sbrs	r24, 5
 186:	fc cf       	rjmp	.-8      	; 0x180 <usart0_transmit+0x2>
	/* Start transmittion */
	UDR0 = data; 			        
 188:	90 93 c6 00 	sts	0x00C6, r25
}
 18c:	08 95       	ret

0000018e <usart0_transmit_string>:

void usart0_transmit_string(char* p){
 18e:	fc 01       	movw	r30, r24
 190:	07 c0       	rjmp	.+14     	; 0x1a0 <usart0_transmit_string+0x12>
}

void usart0_transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !(UCSR0A & (1<<UDRE0)) ); 			                
 192:	80 91 c0 00 	lds	r24, 0x00C0
 196:	85 ff       	sbrs	r24, 5
 198:	fc cf       	rjmp	.-8      	; 0x192 <usart0_transmit_string+0x4>
	UDR0 = data; 			        
}

void usart0_transmit_string(char* p){
	while (*p)
		usart0_transmit(*p++);
 19a:	31 96       	adiw	r30, 0x01	; 1
void usart0_transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !(UCSR0A & (1<<UDRE0)) ); 			                
	/* Start transmittion */
	UDR0 = data; 			        
 19c:	90 93 c6 00 	sts	0x00C6, r25
}

void usart0_transmit_string(char* p){
	while (*p)
 1a0:	90 81       	ld	r25, Z
 1a2:	99 23       	and	r25, r25
 1a4:	b1 f7       	brne	.-20     	; 0x192 <usart0_transmit_string+0x4>
		usart0_transmit(*p++);
}
 1a6:	08 95       	ret

000001a8 <can_init>:
// 6. CAN MOb 인터럽트 클리어(CAN MOb 인터럽트 사용하지 않음)
// 7. CAN 제어기 인에이블 모드 설정 
// 8. CAN 제어기 동작 확인 후 초기화 완료  									
//***************************************************************
void can_init (char baudRate)	// CAN초기화 
{
 1a8:	98 2f       	mov	r25, r24
	unsigned char i, j;
	
	CANGCON |= (1<<SWRES);	// CAN 제어기 리셋
 1aa:	80 91 d8 00 	lds	r24, 0x00D8
 1ae:	81 60       	ori	r24, 0x01	; 1
 1b0:	80 93 d8 00 	sts	0x00D8, r24
							// CAN General Control Register
  							
	//보레이트 설정 ==============================================
	switch(baudRate){
 1b4:	93 30       	cpi	r25, 0x03	; 3
 1b6:	a1 f0       	breq	.+40     	; 0x1e0 <can_init+0x38>
 1b8:	94 30       	cpi	r25, 0x04	; 4
 1ba:	28 f4       	brcc	.+10     	; 0x1c6 <can_init+0x1e>
 1bc:	91 30       	cpi	r25, 0x01	; 1
 1be:	51 f0       	breq	.+20     	; 0x1d4 <can_init+0x2c>
 1c0:	92 30       	cpi	r25, 0x02	; 2
 1c2:	e9 f4       	brne	.+58     	; 0x1fe <can_init+0x56>
 1c4:	0a c0       	rjmp	.+20     	; 0x1da <can_init+0x32>
 1c6:	95 30       	cpi	r25, 0x05	; 5
 1c8:	79 f0       	breq	.+30     	; 0x1e8 <can_init+0x40>
 1ca:	95 30       	cpi	r25, 0x05	; 5
 1cc:	58 f0       	brcs	.+22     	; 0x1e4 <can_init+0x3c>
 1ce:	96 30       	cpi	r25, 0x06	; 6
 1d0:	b1 f4       	brne	.+44     	; 0x1fe <can_init+0x56>
 1d2:	0c c0       	rjmp	.+24     	; 0x1ec <can_init+0x44>
		case b1M:
			CANBT1= 0x00;
 1d4:	10 92 e2 00 	sts	0x00E2, r1
 1d8:	0c c0       	rjmp	.+24     	; 0x1f2 <can_init+0x4a>
			CANBT2= 0x0c;
			CANBT3= 0x37;
			break;
		case b500k:
			CANBT1= 0x02;
 1da:	90 93 e2 00 	sts	0x00E2, r25
 1de:	09 c0       	rjmp	.+18     	; 0x1f2 <can_init+0x4a>
			CANBT2= 0x0c;
			CANBT3= 0x37;			
			break;
		case b250k:
			CANBT1= 0x06;	// CAN보레이트 설정 
 1e0:	86 e0       	ldi	r24, 0x06	; 6
 1e2:	05 c0       	rjmp	.+10     	; 0x1ee <can_init+0x46>
			CANBT2= 0x0c;	// bit timing: datasheet 264 (check table)
			CANBT3= 0x37;	// 250kbps, 16 MHz CPU Clock(0.250usec)
			break;
		case b200k:
			CANBT1= 0x08;
 1e4:	88 e0       	ldi	r24, 0x08	; 8
 1e6:	03 c0       	rjmp	.+6      	; 0x1ee <can_init+0x46>
			CANBT2= 0x0c;
			CANBT3= 0x37;
			break;
		case b125k:
			CANBT1= 0x0E;
 1e8:	8e e0       	ldi	r24, 0x0E	; 14
 1ea:	01 c0       	rjmp	.+2      	; 0x1ee <can_init+0x46>
			CANBT2= 0x0c;
			CANBT3= 0x37;
			break;
		case b100k:
			CANBT1= 0x12;
 1ec:	82 e1       	ldi	r24, 0x12	; 18
 1ee:	80 93 e2 00 	sts	0x00E2, r24
			CANBT2= 0x0c;
 1f2:	8c e0       	ldi	r24, 0x0C	; 12
 1f4:	80 93 e3 00 	sts	0x00E3, r24
			CANBT3= 0x37;													
 1f8:	87 e3       	ldi	r24, 0x37	; 55
 1fa:	80 93 e4 00 	sts	0x00E4, r24
 1fe:	90 e0       	ldi	r25, 0x00	; 0
			break;
	}
	
	for(i=0; i<15; i++)		// Reset all MObs
	{
		CANPAGE = (i<<4);	// MOBNB3~0
 200:	89 2f       	mov	r24, r25
 202:	82 95       	swap	r24
 204:	80 7f       	andi	r24, 0xF0	; 240
 206:	80 93 ed 00 	sts	0x00ED, r24
							// MOb Number Select(0~14)
		CANCDMOB = 0;		// ALL Disable MOb
 20a:	10 92 ef 00 	sts	0x00EF, r1
		CANSTMOB = 0;		// Clear status
 20e:	10 92 ee 00 	sts	0x00EE, r1
		CANIDT1 = 0;		// Clear ID
 212:	10 92 f3 00 	sts	0x00F3, r1
		CANIDT2 = 0;		// Clear ID
 216:	10 92 f2 00 	sts	0x00F2, r1
		CANIDT3 = 0;		// Clear ID
 21a:	10 92 f1 00 	sts	0x00F1, r1
		CANIDT4 = 0;		// Clear ID
 21e:	10 92 f0 00 	sts	0x00F0, r1
		CANIDM1 = 0;		// Clear mask
 222:	10 92 f7 00 	sts	0x00F7, r1
		CANIDM2 = 0;		// Clear mask
 226:	10 92 f6 00 	sts	0x00F6, r1
		CANIDM3 = 0;		// Clear mask
 22a:	10 92 f5 00 	sts	0x00F5, r1
		CANIDM4 = 0;		// Clear mask
 22e:	10 92 f4 00 	sts	0x00F4, r1
 232:	80 e0       	ldi	r24, 0x00	; 0

		for(j=0; j<8; j++)
			CANMSG = 0;		// CAN Data Message Register
 234:	10 92 fa 00 	sts	0x00FA, r1
		CANIDM1 = 0;		// Clear mask
		CANIDM2 = 0;		// Clear mask
		CANIDM3 = 0;		// Clear mask
		CANIDM4 = 0;		// Clear mask

		for(j=0; j<8; j++)
 238:	8f 5f       	subi	r24, 0xFF	; 255
 23a:	88 30       	cpi	r24, 0x08	; 8
 23c:	d9 f7       	brne	.-10     	; 0x234 <can_init+0x8c>
			CANBT2= 0x0c;
			CANBT3= 0x37;													
			break;
	}
	
	for(i=0; i<15; i++)		// Reset all MObs
 23e:	9f 5f       	subi	r25, 0xFF	; 255
 240:	9f 30       	cpi	r25, 0x0F	; 15
 242:	f1 f6       	brne	.-68     	; 0x200 <can_init+0x58>
			CANMSG = 0;		// CAN Data Message Register
							// Clear data
	}
							
							// Clear CAN interrupt registers
	CANGIE = 0;				// CAN General Interrupt Enable Register 
 244:	10 92 db 00 	sts	0x00DB, r1
							// None Interrupts
	CANIE1 = 0;				// CAN Enable INT MOb Registers 1
 248:	10 92 df 00 	sts	0x00DF, r1
							// None Interrupts on MObs
	CANIE2 = 0;				// CAN Enable INT MOb Registers 2
 24c:	10 92 de 00 	sts	0x00DE, r1
							// None Interrupts on MObs
	CANSIT1 = 0;			// CAN Status INT MOb Registers 1
 250:	10 92 e1 00 	sts	0x00E1, r1
							// None Interrupts on MObs
	CANSIT2 = 0;			// CAN Status INT MOb Registers 2
 254:	10 92 e0 00 	sts	0x00E0, r1
							// None Interrupts on MObs

	CANGCON = (1<<TTC );	// TTC mode *******************************************
 258:	80 e2       	ldi	r24, 0x20	; 32
 25a:	80 93 d8 00 	sts	0x00D8, r24
	
	CANGCON |= (1<<ENASTB);	// CAN General Control Register 
 25e:	80 91 d8 00 	lds	r24, 0x00D8
 262:	82 60       	ori	r24, 0x02	; 2
 264:	80 93 d8 00 	sts	0x00D8, r24
							// Enable Mode (11 Recessive Bits has Been read)
							// Start CAN interface

	while (!(CANGSTA & (1<<ENFG))); // CAN General Status Register (Enable Flag)
 268:	80 91 d9 00 	lds	r24, 0x00D9
 26c:	82 ff       	sbrs	r24, 2
 26e:	fc cf       	rjmp	.-8      	; 0x268 <can_init+0xc0>
									// Wait until module ready
}
 270:	08 95       	ret

00000272 <can_tx>:
//		obj; MOb 번호 
//		msg; 메시지 구조체 
//		rtr; RTR r결정(0; 데이터 프레임, 1; 리모트 프레임)	
//***************************************************************
char can_tx (unsigned char obj, struct MOb *msg, char rtr)	// CAN transmission
{
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	eb 01       	movw	r28, r22
 278:	64 2f       	mov	r22, r20
	char send_result = _SEND_FAIL;
	unsigned char i;	
	unsigned long can_id= msg->id;
 27a:	28 81       	ld	r18, Y
 27c:	39 81       	ldd	r19, Y+1	; 0x01
 27e:	4a 81       	ldd	r20, Y+2	; 0x02
 280:	5b 81       	ldd	r21, Y+3	; 0x03
	
								// Enable MOb1, auto increment index, start with index = 0
	CANPAGE = (obj<<4);			// CAN Page MOb Register
 282:	82 95       	swap	r24
 284:	80 7f       	andi	r24, 0xF0	; 240
 286:	80 93 ed 00 	sts	0x00ED, r24
								// MOb Number Select
	CANSTMOB = 0x00;
 28a:	10 92 ee 00 	sts	0x00EE, r1
	CANCDMOB = 0x00;
 28e:	10 92 ef 00 	sts	0x00EF, r1

	if(msg->ide== 0x00)	// standard
 292:	8d 81       	ldd	r24, Y+5	; 0x05
 294:	88 23       	and	r24, r24
 296:	a9 f4       	brne	.+42     	; 0x2c2 <can_tx+0x50>
	{
		CANIDT1= (unsigned char)(can_id>>3);
 298:	da 01       	movw	r26, r20
 29a:	c9 01       	movw	r24, r18
 29c:	f3 e0       	ldi	r31, 0x03	; 3
 29e:	b6 95       	lsr	r27
 2a0:	a7 95       	ror	r26
 2a2:	97 95       	ror	r25
 2a4:	87 95       	ror	r24
 2a6:	fa 95       	dec	r31
 2a8:	d1 f7       	brne	.-12     	; 0x29e <can_tx+0x2c>
 2aa:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(can_id<<5);
 2ae:	82 2f       	mov	r24, r18
 2b0:	82 95       	swap	r24
 2b2:	88 0f       	add	r24, r24
 2b4:	80 7e       	andi	r24, 0xE0	; 224
 2b6:	80 93 f2 00 	sts	0x00F2, r24

		CANCDMOB &= ~0x10;		// Set IDE bit 2.0A 11bits
 2ba:	80 91 ef 00 	lds	r24, 0x00EF
 2be:	8f 7e       	andi	r24, 0xEF	; 239
 2c0:	2a c0       	rjmp	.+84     	; 0x316 <can_tx+0xa4>
		//usart0_transmit_string("\rstandard\n");
	}
	else	// extended
	{
		CANIDT1= (unsigned char)(can_id>>21);
 2c2:	da 01       	movw	r26, r20
 2c4:	c9 01       	movw	r24, r18
 2c6:	e5 e1       	ldi	r30, 0x15	; 21
 2c8:	b6 95       	lsr	r27
 2ca:	a7 95       	ror	r26
 2cc:	97 95       	ror	r25
 2ce:	87 95       	ror	r24
 2d0:	ea 95       	dec	r30
 2d2:	d1 f7       	brne	.-12     	; 0x2c8 <can_tx+0x56>
 2d4:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(can_id>>13);
 2d8:	da 01       	movw	r26, r20
 2da:	c9 01       	movw	r24, r18
 2dc:	7d e0       	ldi	r23, 0x0D	; 13
 2de:	b6 95       	lsr	r27
 2e0:	a7 95       	ror	r26
 2e2:	97 95       	ror	r25
 2e4:	87 95       	ror	r24
 2e6:	7a 95       	dec	r23
 2e8:	d1 f7       	brne	.-12     	; 0x2de <can_tx+0x6c>
 2ea:	80 93 f2 00 	sts	0x00F2, r24
		CANIDT3= (unsigned char)(can_id>>5);
 2ee:	da 01       	movw	r26, r20
 2f0:	c9 01       	movw	r24, r18
 2f2:	35 e0       	ldi	r19, 0x05	; 5
 2f4:	b6 95       	lsr	r27
 2f6:	a7 95       	ror	r26
 2f8:	97 95       	ror	r25
 2fa:	87 95       	ror	r24
 2fc:	3a 95       	dec	r19
 2fe:	d1 f7       	brne	.-12     	; 0x2f4 <can_tx+0x82>
 300:	80 93 f1 00 	sts	0x00F1, r24
		CANIDT4= (unsigned char)(can_id<<3);
 304:	82 2f       	mov	r24, r18
 306:	88 0f       	add	r24, r24
 308:	88 0f       	add	r24, r24
 30a:	88 0f       	add	r24, r24
 30c:	80 93 f0 00 	sts	0x00F0, r24

		CANCDMOB |= 0x10;		// Set IDE bit 2.0B 29bits
 310:	80 91 ef 00 	lds	r24, 0x00EF
 314:	80 61       	ori	r24, 0x10	; 16
 316:	80 93 ef 00 	sts	0x00EF, r24
		//usart0_transmit_string("\rExtended\n");
	}

	CANCDMOB |= (msg->dlc<<DLC0);	// set data length
 31a:	80 91 ef 00 	lds	r24, 0x00EF
 31e:	2e 81       	ldd	r18, Y+6	; 0x06
 320:	82 2b       	or	r24, r18
 322:	80 93 ef 00 	sts	0x00EF, r24

	CANIDT4 |= (rtr & 0x04);     // RTRTAG 설정;
 326:	80 91 f0 00 	lds	r24, 0x00F0
 32a:	64 70       	andi	r22, 0x04	; 4
 32c:	86 2b       	or	r24, r22
 32e:	80 93 f0 00 	sts	0x00F0, r24

	CANIDT4 &= ~0x02;		   // RB1TAG=0;
 332:	80 91 f0 00 	lds	r24, 0x00F0
 336:	8d 7f       	andi	r24, 0xFD	; 253
 338:	80 93 f0 00 	sts	0x00F0, r24
	CANIDT4 &= ~0x01;		   // RB0TAG=1;
 33c:	80 91 f0 00 	lds	r24, 0x00F0
 340:	8e 7f       	andi	r24, 0xFE	; 254
 342:	80 93 f0 00 	sts	0x00F0, r24
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	07 c0       	rjmp	.+14     	; 0x358 <can_tx+0xe6>

	//put data in mailbox
	for(i=0; i<msg->dlc; i++)
		CANMSG = msg->data[i];	// full message 
 34a:	fe 01       	movw	r30, r28
 34c:	e9 0f       	add	r30, r25
 34e:	f1 1d       	adc	r31, r1
 350:	87 81       	ldd	r24, Z+7	; 0x07
 352:	80 93 fa 00 	sts	0x00FA, r24

	CANIDT4 &= ~0x02;		   // RB1TAG=0;
	CANIDT4 &= ~0x01;		   // RB0TAG=1;

	//put data in mailbox
	for(i=0; i<msg->dlc; i++)
 356:	9f 5f       	subi	r25, 0xFF	; 255
 358:	92 17       	cp	r25, r18
 35a:	b8 f3       	brcs	.-18     	; 0x34a <can_tx+0xd8>
		CANMSG = msg->data[i];	// full message 

	//enable transmission		
	CANCDMOB |= (1<<CONMOB0);
 35c:	80 91 ef 00 	lds	r24, 0x00EF
 360:	80 64       	ori	r24, 0x40	; 64
 362:	80 93 ef 00 	sts	0x00EF, r24


	//_delay_ms(10);
	//PORTE=0xAA;
	if(	(CANSTMOB & (1<<TXOK)) )
 366:	80 91 ee 00 	lds	r24, 0x00EE
 36a:	86 fd       	sbrc	r24, 6
	{
		PORTE=0x00;
 36c:	1e b8       	out	0x0e, r1	; 14

	// monitoring with serial com
	// usart1_transmit_string("\rTXOK\n");

	//reset flag
	CANSTMOB &= ~(1<<TXOK);
 36e:	80 91 ee 00 	lds	r24, 0x00EE
 372:	8f 7b       	andi	r24, 0xBF	; 191
 374:	80 93 ee 00 	sts	0x00EE, r24

	return(send_result);
}
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	08 95       	ret

00000380 <can_int_rx_set>:
//  5. DLC 설정 
//  6. 인터럽트 인에이블 (interrupt)
//  7. 수신 모드 설정 
//****************************************************************/
void can_int_rx_set(char obj, unsigned long id, char rplvIde, unsigned char dlc, unsigned long idmask, unsigned char rtrIdemask)
{
 380:	af 92       	push	r10
 382:	cf 92       	push	r12
 384:	df 92       	push	r13
 386:	ef 92       	push	r14
 388:	ff 92       	push	r15
 38a:	0f 93       	push	r16
 38c:	1f 93       	push	r17
 38e:	18 2f       	mov	r17, r24
	CANPAGE = obj<<4;		// set MOb number
 390:	82 95       	swap	r24
 392:	80 7f       	andi	r24, 0xF0	; 240
 394:	80 93 ed 00 	sts	0x00ED, r24

	CANSTMOB = 0x00;		// clear status
 398:	10 92 ee 00 	sts	0x00EE, r1

	if(rplvIde & 0x02)	
 39c:	21 ff       	sbrs	r18, 1
 39e:	04 c0       	rjmp	.+8      	; 0x3a8 <can_int_rx_set+0x28>
		CANCDMOB |= 0x20;			// RPLV set, 자동 응답 모드 설정 
 3a0:	80 91 ef 00 	lds	r24, 0x00EF
 3a4:	80 62       	ori	r24, 0x20	; 32
 3a6:	03 c0       	rjmp	.+6      	; 0x3ae <can_int_rx_set+0x2e>
	else
		CANCDMOB &= ~0x20;			// RPLV clear
 3a8:	80 91 ef 00 	lds	r24, 0x00EF
 3ac:	8f 7d       	andi	r24, 0xDF	; 223
 3ae:	80 93 ef 00 	sts	0x00EF, r24

	if(( rplvIde & 0x01) == STD)			// standard
 3b2:	20 fd       	sbrc	r18, 0
 3b4:	2c c0       	rjmp	.+88     	; 0x40e <can_int_rx_set+0x8e>
	{
		CANIDT1= (unsigned char)(id>>3);
 3b6:	db 01       	movw	r26, r22
 3b8:	ca 01       	movw	r24, r20
 3ba:	33 e0       	ldi	r19, 0x03	; 3
 3bc:	b6 95       	lsr	r27
 3be:	a7 95       	ror	r26
 3c0:	97 95       	ror	r25
 3c2:	87 95       	ror	r24
 3c4:	3a 95       	dec	r19
 3c6:	d1 f7       	brne	.-12     	; 0x3bc <can_int_rx_set+0x3c>
 3c8:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(id<<5);
 3cc:	84 2f       	mov	r24, r20
 3ce:	82 95       	swap	r24
 3d0:	88 0f       	add	r24, r24
 3d2:	80 7e       	andi	r24, 0xE0	; 224
 3d4:	80 93 f2 00 	sts	0x00F2, r24

		CANIDM1= (unsigned char)(idmask>>3);
 3d8:	d7 01       	movw	r26, r14
 3da:	c6 01       	movw	r24, r12
 3dc:	23 e0       	ldi	r18, 0x03	; 3
 3de:	b6 95       	lsr	r27
 3e0:	a7 95       	ror	r26
 3e2:	97 95       	ror	r25
 3e4:	87 95       	ror	r24
 3e6:	2a 95       	dec	r18
 3e8:	d1 f7       	brne	.-12     	; 0x3de <can_int_rx_set+0x5e>
 3ea:	80 93 f7 00 	sts	0x00F7, r24
		CANIDM2= (unsigned char)(idmask<<5);
 3ee:	8c 2d       	mov	r24, r12
 3f0:	82 95       	swap	r24
 3f2:	88 0f       	add	r24, r24
 3f4:	80 7e       	andi	r24, 0xE0	; 224
 3f6:	80 93 f6 00 	sts	0x00F6, r24
		CANIDM4=0;
 3fa:	10 92 f4 00 	sts	0x00F4, r1

		CANCDMOB &= ~0x10;	// clear IDE =0, standard 11 bits
 3fe:	80 91 ef 00 	lds	r24, 0x00EF
 402:	8f 7e       	andi	r24, 0xEF	; 239
 404:	80 93 ef 00 	sts	0x00EF, r24

		usart1_transmit_string("\rRx Standard Set\n");
 408:	8e ef       	ldi	r24, 0xFE	; 254
 40a:	92 e0       	ldi	r25, 0x02	; 2
 40c:	55 c0       	rjmp	.+170    	; 0x4b8 <can_int_rx_set+0x138>
	}
	else					// extended
	{
		CANIDT1= (unsigned char)(id>>21);
 40e:	db 01       	movw	r26, r22
 410:	ca 01       	movw	r24, r20
 412:	f5 e1       	ldi	r31, 0x15	; 21
 414:	b6 95       	lsr	r27
 416:	a7 95       	ror	r26
 418:	97 95       	ror	r25
 41a:	87 95       	ror	r24
 41c:	fa 95       	dec	r31
 41e:	d1 f7       	brne	.-12     	; 0x414 <can_int_rx_set+0x94>
 420:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(id>>13);
 424:	db 01       	movw	r26, r22
 426:	ca 01       	movw	r24, r20
 428:	ed e0       	ldi	r30, 0x0D	; 13
 42a:	b6 95       	lsr	r27
 42c:	a7 95       	ror	r26
 42e:	97 95       	ror	r25
 430:	87 95       	ror	r24
 432:	ea 95       	dec	r30
 434:	d1 f7       	brne	.-12     	; 0x42a <can_int_rx_set+0xaa>
 436:	80 93 f2 00 	sts	0x00F2, r24
		CANIDT3= (unsigned char)(id>>5);
 43a:	db 01       	movw	r26, r22
 43c:	ca 01       	movw	r24, r20
 43e:	55 e0       	ldi	r21, 0x05	; 5
 440:	b6 95       	lsr	r27
 442:	a7 95       	ror	r26
 444:	97 95       	ror	r25
 446:	87 95       	ror	r24
 448:	5a 95       	dec	r21
 44a:	d1 f7       	brne	.-12     	; 0x440 <can_int_rx_set+0xc0>
 44c:	80 93 f1 00 	sts	0x00F1, r24
		CANIDT4= (unsigned char)(id<<3);
 450:	84 2f       	mov	r24, r20
 452:	88 0f       	add	r24, r24
 454:	88 0f       	add	r24, r24
 456:	88 0f       	add	r24, r24
 458:	80 93 f0 00 	sts	0x00F0, r24

		CANIDM1= (unsigned char)(idmask>>21);
 45c:	d7 01       	movw	r26, r14
 45e:	c6 01       	movw	r24, r12
 460:	45 e1       	ldi	r20, 0x15	; 21
 462:	b6 95       	lsr	r27
 464:	a7 95       	ror	r26
 466:	97 95       	ror	r25
 468:	87 95       	ror	r24
 46a:	4a 95       	dec	r20
 46c:	d1 f7       	brne	.-12     	; 0x462 <can_int_rx_set+0xe2>
 46e:	80 93 f7 00 	sts	0x00F7, r24
		CANIDM2= (unsigned char)(idmask>>13);
 472:	d7 01       	movw	r26, r14
 474:	c6 01       	movw	r24, r12
 476:	3d e0       	ldi	r19, 0x0D	; 13
 478:	b6 95       	lsr	r27
 47a:	a7 95       	ror	r26
 47c:	97 95       	ror	r25
 47e:	87 95       	ror	r24
 480:	3a 95       	dec	r19
 482:	d1 f7       	brne	.-12     	; 0x478 <can_int_rx_set+0xf8>
 484:	80 93 f6 00 	sts	0x00F6, r24
		CANIDM3= (unsigned char)(idmask>>5);
 488:	d7 01       	movw	r26, r14
 48a:	c6 01       	movw	r24, r12
 48c:	25 e0       	ldi	r18, 0x05	; 5
 48e:	b6 95       	lsr	r27
 490:	a7 95       	ror	r26
 492:	97 95       	ror	r25
 494:	87 95       	ror	r24
 496:	2a 95       	dec	r18
 498:	d1 f7       	brne	.-12     	; 0x48e <can_int_rx_set+0x10e>
 49a:	80 93 f5 00 	sts	0x00F5, r24
		CANIDM4= (unsigned char)(idmask<<3);
 49e:	8c 2d       	mov	r24, r12
 4a0:	88 0f       	add	r24, r24
 4a2:	88 0f       	add	r24, r24
 4a4:	88 0f       	add	r24, r24
 4a6:	80 93 f4 00 	sts	0x00F4, r24

		CANCDMOB |= 0x10;	// set IDE =1, extended 29 bits
 4aa:	80 91 ef 00 	lds	r24, 0x00EF
 4ae:	80 61       	ori	r24, 0x10	; 16
 4b0:	80 93 ef 00 	sts	0x00EF, r24

		usart1_transmit_string("\rRx Extended Set\n");
 4b4:	80 e1       	ldi	r24, 0x10	; 16
 4b6:	93 e0       	ldi	r25, 0x03	; 3
 4b8:	0e 94 9d 00 	call	0x13a	; 0x13a <usart1_transmit_string>
	}
	CANCDMOB |= (dlc & 0x0f);		// set data length
 4bc:	80 91 ef 00 	lds	r24, 0x00EF
 4c0:	0f 70       	andi	r16, 0x0F	; 15
 4c2:	80 2b       	or	r24, r16
 4c4:	80 93 ef 00 	sts	0x00EF, r24

	CANIDM4 |= (unsigned char)(rtrIdemask & 0x07);
 4c8:	80 91 f4 00 	lds	r24, 0x00F4
 4cc:	97 e0       	ldi	r25, 0x07	; 7
 4ce:	a9 22       	and	r10, r25
 4d0:	8a 29       	or	r24, r10
 4d2:	80 93 f4 00 	sts	0x00F4, r24
//	CANIDM4 &= ~0x02;		// recommended
//	CANIDM4 &= ~0x01;		// IDEMSK= 1/0 enable comparison (IDE receive)


//  인터럽트 인에이블(인터럽트 설정)
	CANGIE |= 0xa0; 		// Enable all interrupt and Enable Rx interrupt
 4d6:	80 91 db 00 	lds	r24, 0x00DB
 4da:	80 6a       	ori	r24, 0xA0	; 160
 4dc:	80 93 db 00 	sts	0x00DB, r24

	if(obj<8) 
 4e0:	18 30       	cpi	r17, 0x08	; 8
 4e2:	50 f4       	brcc	.+20     	; 0x4f8 <can_int_rx_set+0x178>
		CANIE2 = (1<<obj);		// 해당 MOb의 인터럽트를 인에이블 시킴 
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <can_int_rx_set+0x16e>
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	1a 95       	dec	r17
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <can_int_rx_set+0x16a>
 4f2:	80 93 de 00 	sts	0x00DE, r24
 4f6:	0d c0       	rjmp	.+26     	; 0x512 <can_int_rx_set+0x192>
	else        
		CANIE1 = (1<<(obj-8));	// 
 4f8:	21 2f       	mov	r18, r17
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	28 50       	subi	r18, 0x08	; 8
 4fe:	30 40       	sbci	r19, 0x00	; 0
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	02 c0       	rjmp	.+4      	; 0x50a <can_int_rx_set+0x18a>
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	2a 95       	dec	r18
 50c:	e2 f7       	brpl	.-8      	; 0x506 <can_int_rx_set+0x186>
 50e:	80 93 df 00 	sts	0x00DF, r24

	CANCDMOB |= 0x80;			// 수신 인에이블 
 512:	80 91 ef 00 	lds	r24, 0x00EF
 516:	80 68       	ori	r24, 0x80	; 128
 518:	80 93 ef 00 	sts	0x00EF, r24
	sei();
 51c:	78 94       	sei
}
 51e:	1f 91       	pop	r17
 520:	0f 91       	pop	r16
 522:	ff 90       	pop	r15
 524:	ef 90       	pop	r14
 526:	df 90       	pop	r13
 528:	cf 90       	pop	r12
 52a:	af 90       	pop	r10
 52c:	08 95       	ret

0000052e <can_rx_set>:
//		dlc; 메시지 데이터 길이 (최대 8bytes)
//		idmask; CAN ID 수신 마스크 
//		rtrIdemask; RTR 비트와 IDE 마스크 			
//****************************************************************/
void can_rx_set(char obj, unsigned long id, char ide, unsigned char dlc, unsigned long idmask, unsigned char rtrIdemask)
{
 52e:	af 92       	push	r10
 530:	cf 92       	push	r12
 532:	df 92       	push	r13
 534:	ef 92       	push	r14
 536:	ff 92       	push	r15
 538:	0f 93       	push	r16
 53a:	1f 93       	push	r17
 53c:	1a 2d       	mov	r17, r10
	CANPAGE = obj<<4;		// set MOb number
 53e:	82 95       	swap	r24
 540:	80 7f       	andi	r24, 0xF0	; 240
 542:	80 93 ed 00 	sts	0x00ED, r24

	CANSTMOB = 0x00;		// clear status
 546:	10 92 ee 00 	sts	0x00EE, r1

	if(ide== STD)			// standard
 54a:	22 23       	and	r18, r18
 54c:	61 f5       	brne	.+88     	; 0x5a6 <can_rx_set+0x78>
	{
		CANIDT1= (unsigned char)(id>>3);
 54e:	db 01       	movw	r26, r22
 550:	ca 01       	movw	r24, r20
 552:	33 e0       	ldi	r19, 0x03	; 3
 554:	b6 95       	lsr	r27
 556:	a7 95       	ror	r26
 558:	97 95       	ror	r25
 55a:	87 95       	ror	r24
 55c:	3a 95       	dec	r19
 55e:	d1 f7       	brne	.-12     	; 0x554 <can_rx_set+0x26>
 560:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(id<<5);
 564:	84 2f       	mov	r24, r20
 566:	82 95       	swap	r24
 568:	88 0f       	add	r24, r24
 56a:	80 7e       	andi	r24, 0xE0	; 224
 56c:	80 93 f2 00 	sts	0x00F2, r24

		CANIDM1= (unsigned char)(idmask>>3);
 570:	d7 01       	movw	r26, r14
 572:	c6 01       	movw	r24, r12
 574:	23 e0       	ldi	r18, 0x03	; 3
 576:	b6 95       	lsr	r27
 578:	a7 95       	ror	r26
 57a:	97 95       	ror	r25
 57c:	87 95       	ror	r24
 57e:	2a 95       	dec	r18
 580:	d1 f7       	brne	.-12     	; 0x576 <can_rx_set+0x48>
 582:	80 93 f7 00 	sts	0x00F7, r24
		CANIDM2= (unsigned char)(idmask<<5);
 586:	8c 2d       	mov	r24, r12
 588:	82 95       	swap	r24
 58a:	88 0f       	add	r24, r24
 58c:	80 7e       	andi	r24, 0xE0	; 224
 58e:	80 93 f6 00 	sts	0x00F6, r24
		CANIDM4=0;
 592:	10 92 f4 00 	sts	0x00F4, r1

		CANCDMOB &= ~0x10;	// clear IDE =0, standard 11 bits
 596:	80 91 ef 00 	lds	r24, 0x00EF
 59a:	8f 7e       	andi	r24, 0xEF	; 239
 59c:	80 93 ef 00 	sts	0x00EF, r24

		usart1_transmit_string("\rRx Standard Set\n");
 5a0:	8e ef       	ldi	r24, 0xFE	; 254
 5a2:	92 e0       	ldi	r25, 0x02	; 2
 5a4:	55 c0       	rjmp	.+170    	; 0x650 <can_rx_set+0x122>
	}
	else					// extended
	{
		CANIDT1= (unsigned char)(id>>21);
 5a6:	db 01       	movw	r26, r22
 5a8:	ca 01       	movw	r24, r20
 5aa:	f5 e1       	ldi	r31, 0x15	; 21
 5ac:	b6 95       	lsr	r27
 5ae:	a7 95       	ror	r26
 5b0:	97 95       	ror	r25
 5b2:	87 95       	ror	r24
 5b4:	fa 95       	dec	r31
 5b6:	d1 f7       	brne	.-12     	; 0x5ac <can_rx_set+0x7e>
 5b8:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(id>>13);
 5bc:	db 01       	movw	r26, r22
 5be:	ca 01       	movw	r24, r20
 5c0:	ed e0       	ldi	r30, 0x0D	; 13
 5c2:	b6 95       	lsr	r27
 5c4:	a7 95       	ror	r26
 5c6:	97 95       	ror	r25
 5c8:	87 95       	ror	r24
 5ca:	ea 95       	dec	r30
 5cc:	d1 f7       	brne	.-12     	; 0x5c2 <can_rx_set+0x94>
 5ce:	80 93 f2 00 	sts	0x00F2, r24
		CANIDT3= (unsigned char)(id>>5);
 5d2:	db 01       	movw	r26, r22
 5d4:	ca 01       	movw	r24, r20
 5d6:	75 e0       	ldi	r23, 0x05	; 5
 5d8:	b6 95       	lsr	r27
 5da:	a7 95       	ror	r26
 5dc:	97 95       	ror	r25
 5de:	87 95       	ror	r24
 5e0:	7a 95       	dec	r23
 5e2:	d1 f7       	brne	.-12     	; 0x5d8 <can_rx_set+0xaa>
 5e4:	80 93 f1 00 	sts	0x00F1, r24
		CANIDT4= (unsigned char)(id<<3);
 5e8:	84 2f       	mov	r24, r20
 5ea:	88 0f       	add	r24, r24
 5ec:	88 0f       	add	r24, r24
 5ee:	88 0f       	add	r24, r24
 5f0:	80 93 f0 00 	sts	0x00F0, r24

		CANIDM1= (unsigned char)(idmask>>21);
 5f4:	d7 01       	movw	r26, r14
 5f6:	c6 01       	movw	r24, r12
 5f8:	65 e1       	ldi	r22, 0x15	; 21
 5fa:	b6 95       	lsr	r27
 5fc:	a7 95       	ror	r26
 5fe:	97 95       	ror	r25
 600:	87 95       	ror	r24
 602:	6a 95       	dec	r22
 604:	d1 f7       	brne	.-12     	; 0x5fa <can_rx_set+0xcc>
 606:	80 93 f7 00 	sts	0x00F7, r24
		CANIDM2= (unsigned char)(idmask>>13);
 60a:	d7 01       	movw	r26, r14
 60c:	c6 01       	movw	r24, r12
 60e:	5d e0       	ldi	r21, 0x0D	; 13
 610:	b6 95       	lsr	r27
 612:	a7 95       	ror	r26
 614:	97 95       	ror	r25
 616:	87 95       	ror	r24
 618:	5a 95       	dec	r21
 61a:	d1 f7       	brne	.-12     	; 0x610 <can_rx_set+0xe2>
 61c:	80 93 f6 00 	sts	0x00F6, r24
		CANIDM3= (unsigned char)(idmask>>5);
 620:	d7 01       	movw	r26, r14
 622:	c6 01       	movw	r24, r12
 624:	45 e0       	ldi	r20, 0x05	; 5
 626:	b6 95       	lsr	r27
 628:	a7 95       	ror	r26
 62a:	97 95       	ror	r25
 62c:	87 95       	ror	r24
 62e:	4a 95       	dec	r20
 630:	d1 f7       	brne	.-12     	; 0x626 <can_rx_set+0xf8>
 632:	80 93 f5 00 	sts	0x00F5, r24
		CANIDM4= (unsigned char)(idmask<<3);
 636:	8c 2d       	mov	r24, r12
 638:	88 0f       	add	r24, r24
 63a:	88 0f       	add	r24, r24
 63c:	88 0f       	add	r24, r24
 63e:	80 93 f4 00 	sts	0x00F4, r24

		CANCDMOB |= 0x10;	// set IDE =1, extended 29 bits
 642:	80 91 ef 00 	lds	r24, 0x00EF
 646:	80 61       	ori	r24, 0x10	; 16
 648:	80 93 ef 00 	sts	0x00EF, r24

		usart1_transmit_string("\rRx Extended Set\n");
 64c:	80 e1       	ldi	r24, 0x10	; 16
 64e:	93 e0       	ldi	r25, 0x03	; 3
 650:	0e 94 9d 00 	call	0x13a	; 0x13a <usart1_transmit_string>
	}
	CANCDMOB |= (dlc & 0x0f);		// set data length
 654:	80 91 ef 00 	lds	r24, 0x00EF
 658:	0f 70       	andi	r16, 0x0F	; 15
 65a:	80 2b       	or	r24, r16
 65c:	80 93 ef 00 	sts	0x00EF, r24

	CANIDM4 |= (unsigned char)(rtrIdemask & 0x07);
 660:	80 91 f4 00 	lds	r24, 0x00F4
 664:	17 70       	andi	r17, 0x07	; 7
 666:	81 2b       	or	r24, r17
 668:	80 93 f4 00 	sts	0x00F4, r24
//	CANIDM4 &= ~0x04;		// RTRMSK= 1/0 enable comparison (Data receive)
//	CANIDM4 &= ~0x02;		// recommended
//	CANIDM4 &= ~0x01;		// IDEMSK= 1/0 enable comparison (IDE receive)

	CANCDMOB |= 0x80;		// receive enable 
 66c:	80 91 ef 00 	lds	r24, 0x00EF
 670:	80 68       	ori	r24, 0x80	; 128
 672:	80 93 ef 00 	sts	0x00EF, r24
}
 676:	1f 91       	pop	r17
 678:	0f 91       	pop	r16
 67a:	ff 90       	pop	r15
 67c:	ef 90       	pop	r14
 67e:	df 90       	pop	r13
 680:	cf 90       	pop	r12
 682:	af 90       	pop	r10
 684:	08 95       	ret

00000686 <can_rx>:
// 5. IDE 수신 처리 
// 6. DLC 수신 처리 
// 7. Data 수신 처리 
//***************************************************************
char can_rx(unsigned char obj, struct MOb *msg)		
{
 686:	af 92       	push	r10
 688:	bf 92       	push	r11
 68a:	cf 92       	push	r12
 68c:	df 92       	push	r13
 68e:	ef 92       	push	r14
 690:	ff 92       	push	r15
 692:	0f 93       	push	r16
 694:	1f 93       	push	r17
 696:	cf 93       	push	r28
 698:	df 93       	push	r29
 69a:	08 2f       	mov	r16, r24
 69c:	eb 01       	movw	r28, r22
	char rece_result = _RECE_FAIL;
	unsigned char i;	
	unsigned long can_id= 0;
	
	CANPAGE = (obj<<4);				// 수신 MOb 선택 
 69e:	82 95       	swap	r24
 6a0:	80 7f       	andi	r24, 0xF0	; 240
 6a2:	80 93 ed 00 	sts	0x00ED, r24

	usart1_transmit_string("\rRX MOb #");
 6a6:	82 e2       	ldi	r24, 0x22	; 34
 6a8:	93 e0       	ldi	r25, 0x03	; 3
 6aa:	0e 94 9d 00 	call	0x13a	; 0x13a <usart1_transmit_string>
	usart1_transmit(obj+0x30);
 6ae:	10 e0       	ldi	r17, 0x00	; 0
 6b0:	c8 01       	movw	r24, r16
 6b2:	c0 96       	adiw	r24, 0x30	; 48
 6b4:	0e 94 95 00 	call	0x12a	; 0x12a <usart1_transmit>
	usart1_transmit_string("\r\n");
 6b8:	8c e2       	ldi	r24, 0x2C	; 44
 6ba:	93 e0       	ldi	r25, 0x03	; 3
 6bc:	0e 94 9d 00 	call	0x13a	; 0x13a <usart1_transmit_string>

	// 수신 완료될 때까지 대기함 
	while(!(CANSTMOB&(1<<RXOK)));
 6c0:	80 91 ee 00 	lds	r24, 0x00EE
 6c4:	85 ff       	sbrs	r24, 5
 6c6:	fc cf       	rjmp	.-8      	; 0x6c0 <can_rx+0x3a>
	// 수신이 완료되면 
	// CANIDT, CANCDMOB, CANMSG에 수신 메시지가 저장됨 
	// get CANIDT and CANCDMOB and CANMSg
	usart1_transmit_string("\rRXOK\n");
 6c8:	8f e2       	ldi	r24, 0x2F	; 47
 6ca:	93 e0       	ldi	r25, 0x03	; 3
 6cc:	0e 94 9d 00 	call	0x13a	; 0x13a <usart1_transmit_string>
	rece_result = _RECE_OK;

	// 표준 혹은 확장 포맷에 맞추어 ID, IDE 결정 
	if((CANCDMOB & 0x10) == 0x00){			// IDE standard ?
 6d0:	80 91 ef 00 	lds	r24, 0x00EF
 6d4:	84 fd       	sbrc	r24, 4
 6d6:	1d c0       	rjmp	.+58     	; 0x712 <can_rx+0x8c>
		msg->ide= STD;
 6d8:	1d 82       	std	Y+5, r1	; 0x05
		can_id  = ((unsigned long)CANIDT1)<<8;
 6da:	80 91 f3 00 	lds	r24, 0x00F3
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	a0 e0       	ldi	r26, 0x00	; 0
 6e2:	b0 e0       	ldi	r27, 0x00	; 0
 6e4:	aa 24       	eor	r10, r10
 6e6:	b8 2e       	mov	r11, r24
 6e8:	c9 2e       	mov	r12, r25
 6ea:	da 2e       	mov	r13, r26
		can_id |= ((unsigned long)CANIDT2);
 6ec:	80 91 f2 00 	lds	r24, 0x00F2
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	a0 e0       	ldi	r26, 0x00	; 0
 6f4:	b0 e0       	ldi	r27, 0x00	; 0
 6f6:	a8 2a       	or	r10, r24
 6f8:	b9 2a       	or	r11, r25
 6fa:	ca 2a       	or	r12, r26
 6fc:	db 2a       	or	r13, r27
		can_id>>=5;
 6fe:	e5 e0       	ldi	r30, 0x05	; 5
 700:	d6 94       	lsr	r13
 702:	c7 94       	ror	r12
 704:	b7 94       	ror	r11
 706:	a7 94       	ror	r10
 708:	ea 95       	dec	r30
 70a:	d1 f7       	brne	.-12     	; 0x700 <can_rx+0x7a>
		usart1_transmit_string("\rRx Standard\n");
 70c:	86 e3       	ldi	r24, 0x36	; 54
 70e:	93 e0       	ldi	r25, 0x03	; 3
 710:	36 c0       	rjmp	.+108    	; 0x77e <can_rx+0xf8>
	}
	else{
		msg->ide= EXT;
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	8d 83       	std	Y+5, r24	; 0x05
		can_id  = ((unsigned long)CANIDT1)<<24;
 716:	80 91 f3 00 	lds	r24, 0x00F3
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	a0 e0       	ldi	r26, 0x00	; 0
 71e:	b0 e0       	ldi	r27, 0x00	; 0
 720:	d8 2e       	mov	r13, r24
 722:	cc 24       	eor	r12, r12
 724:	bb 24       	eor	r11, r11
 726:	aa 24       	eor	r10, r10
		can_id |= ((unsigned long)CANIDT2)<<16;
 728:	80 91 f2 00 	lds	r24, 0x00F2
		can_id |= ((unsigned long)CANIDT3)<<8;
 72c:	e0 90 f1 00 	lds	r14, 0x00F1
		can_id |= ((unsigned long)CANIDT4);
 730:	20 91 f0 00 	lds	r18, 0x00F0
		usart1_transmit_string("\rRx Standard\n");
	}
	else{
		msg->ide= EXT;
		can_id  = ((unsigned long)CANIDT1)<<24;
		can_id |= ((unsigned long)CANIDT2)<<16;
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	a0 e0       	ldi	r26, 0x00	; 0
 738:	b0 e0       	ldi	r27, 0x00	; 0
 73a:	dc 01       	movw	r26, r24
 73c:	99 27       	eor	r25, r25
 73e:	88 27       	eor	r24, r24
 740:	a8 2a       	or	r10, r24
 742:	b9 2a       	or	r11, r25
 744:	ca 2a       	or	r12, r26
 746:	db 2a       	or	r13, r27
		can_id |= ((unsigned long)CANIDT3)<<8;
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	40 e0       	ldi	r20, 0x00	; 0
 74c:	50 e0       	ldi	r21, 0x00	; 0
 74e:	a2 2a       	or	r10, r18
 750:	b3 2a       	or	r11, r19
 752:	c4 2a       	or	r12, r20
 754:	d5 2a       	or	r13, r21
		can_id |= ((unsigned long)CANIDT4);
 756:	ff 24       	eor	r15, r15
 758:	00 e0       	ldi	r16, 0x00	; 0
 75a:	10 e0       	ldi	r17, 0x00	; 0
 75c:	10 2f       	mov	r17, r16
 75e:	0f 2d       	mov	r16, r15
 760:	fe 2c       	mov	r15, r14
 762:	ee 24       	eor	r14, r14
 764:	ae 28       	or	r10, r14
 766:	bf 28       	or	r11, r15
 768:	c0 2a       	or	r12, r16
 76a:	d1 2a       	or	r13, r17
		can_id>>=3;
 76c:	43 e0       	ldi	r20, 0x03	; 3
 76e:	d6 94       	lsr	r13
 770:	c7 94       	ror	r12
 772:	b7 94       	ror	r11
 774:	a7 94       	ror	r10
 776:	4a 95       	dec	r20
 778:	d1 f7       	brne	.-12     	; 0x76e <can_rx+0xe8>
		usart1_transmit_string("\rRx Extended\n");
 77a:	84 e4       	ldi	r24, 0x44	; 68
 77c:	93 e0       	ldi	r25, 0x03	; 3
 77e:	0e 94 9d 00 	call	0x13a	; 0x13a <usart1_transmit_string>
	}
	msg->id= can_id;			// 구조체 변수로 CANID 대입 
 782:	a8 82       	st	Y, r10
 784:	b9 82       	std	Y+1, r11	; 0x01
 786:	ca 82       	std	Y+2, r12	; 0x02
 788:	db 82       	std	Y+3, r13	; 0x03

	msg->rtr= CANIDT4 & 0x04;   
 78a:	80 91 f0 00 	lds	r24, 0x00F0
 78e:	84 70       	andi	r24, 0x04	; 4
 790:	8c 83       	std	Y+4, r24	; 0x04

	msg->dlc= CANCDMOB & 0x0f;	// 수신 메시지 길이 구조체 변수에 대입 
 792:	80 91 ef 00 	lds	r24, 0x00EF
 796:	8f 70       	andi	r24, 0x0F	; 15
 798:	8e 83       	std	Y+6, r24	; 0x06
 79a:	20 e0       	ldi	r18, 0x00	; 0
 79c:	06 c0       	rjmp	.+12     	; 0x7aa <can_rx+0x124>

	// get data
	for(i=0; i<(CANCDMOB&0xf); i++){
		msg->data[i] = CANMSG;	// 메시지 데이터 배열에 저장 
 79e:	80 91 fa 00 	lds	r24, 0x00FA
 7a2:	ec 0f       	add	r30, r28
 7a4:	fd 1f       	adc	r31, r29
 7a6:	87 83       	std	Z+7, r24	; 0x07
	msg->rtr= CANIDT4 & 0x04;   

	msg->dlc= CANCDMOB & 0x0f;	// 수신 메시지 길이 구조체 변수에 대입 

	// get data
	for(i=0; i<(CANCDMOB&0xf); i++){
 7a8:	2f 5f       	subi	r18, 0xFF	; 255
 7aa:	e2 2f       	mov	r30, r18
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	80 91 ef 00 	lds	r24, 0x00EF
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	8f 70       	andi	r24, 0x0F	; 15
 7b6:	90 70       	andi	r25, 0x00	; 0
 7b8:	e8 17       	cp	r30, r24
 7ba:	f9 07       	cpc	r31, r25
 7bc:	84 f3       	brlt	.-32     	; 0x79e <can_rx+0x118>
		msg->data[i] = CANMSG;	// 메시지 데이터 배열에 저장 
	}

	// rx init 
	CANSTMOB = 0x00;			// 상태 초기 화 
 7be:	10 92 ee 00 	sts	0x00EE, r1

	// enable reception mode and ide set
	CANCDMOB |= (1<<CONMOB1); 	// 수신 IDE 유지하고 수신 모드 설정
 7c2:	80 91 ef 00 	lds	r24, 0x00EF
 7c6:	80 68       	ori	r24, 0x80	; 128
 7c8:	80 93 ef 00 	sts	0x00EF, r24

	// reset flag
	CANSTMOB &= ~(1<<RXOK);		// 수신대기 
 7cc:	80 91 ee 00 	lds	r24, 0x00EE
 7d0:	8f 7d       	andi	r24, 0xDF	; 223
 7d2:	80 93 ee 00 	sts	0x00EE, r24

	return(rece_result);
}
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	df 91       	pop	r29
 7da:	cf 91       	pop	r28
 7dc:	1f 91       	pop	r17
 7de:	0f 91       	pop	r16
 7e0:	ff 90       	pop	r15
 7e2:	ef 90       	pop	r14
 7e4:	df 90       	pop	r13
 7e6:	cf 90       	pop	r12
 7e8:	bf 90       	pop	r11
 7ea:	af 90       	pop	r10
 7ec:	08 95       	ret

000007ee <_exit>:
 7ee:	f8 94       	cli

000007f0 <__stop_program>:
 7f0:	ff cf       	rjmp	.-2      	; 0x7f0 <__stop_program>
